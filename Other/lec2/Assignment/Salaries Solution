'''
Task1:
Import pandas as pd.
'''
import pandas as pd

'''
Task2:
Read Salaries.csv as a dataframe called sal.
'''
sal = pd.read_csv('Salaries.csv')

'''
Task3:
Check the head of the DataFrame.
It should look like this:
	Id	EmployeeName		JobTitle					BasePay		OvertimePay	OtherPay	BenefitsTotalPay	TotalPayBenefitsYear	Notes	Agency		Status
0	1	NATHANIEL FORD		GENERAL MANAGER-METROPOLITAN TRANSIT AUTHORITY	167411.18	0.00		400184.25	NaN	567595.43	567595.43	2011	NaN	San Francisco	NaN
1	2	GARY JIMENEZ		CAPTAIN III (POLICE DEPARTMENT)			155966.02	245131.88	137811.38	NaN	538909.28	538909.28	2011	NaN	San Francisco	NaN
2	3	ALBERT PARDINI		CAPTAIN III (POLICE DEPARTMENT)			212739.13	106088.18	16452.60	NaN	335279.91	335279.91	2011	NaN	San Francisco	NaN
3	4	CHRISTOPHER CHONG	WIRE ROPE CABLE MAINTENANCE MECHANIC		77916.00	56120.71	198306.90	NaN	332343.61	332343.61	2011	NaN	San Francisco	NaN
4	5	PATRICK GARDNER		DEPUTY CHIEF OF DEPARTMENT,(FIRE DEPARTMENT)	134401.60	9737.00		182234.59	NaN	326373.19	326373.19	2011	NaN	San Francisco	NaN
'''
sal.head()

'''
Task4:
Use the .info() method to find out how many entries there are.

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 148654 entries, 0 to 148653
Data columns (total 13 columns):
Id                  148654 non-null int64
EmployeeName        148654 non-null object
JobTitle            148654 non-null object
BasePay             148045 non-null float64
OvertimePay         148650 non-null float64
OtherPay            148650 non-null float64
Benefits            112491 non-null float64
TotalPay            148654 non-null float64
TotalPayBenefits    148654 non-null float64
Year                148654 non-null int64
Notes               0 non-null float64
Agency              148654 non-null object
Status              0 non-null float64
dtypes: float64(8), int64(2), object(3)
memory usage: 14.7+ MB
'''

sal.info()

'''
Task5:
What is the average BasePay ?
'''

sal['BasePay'].mean()

'''
Task6:
What is the highest amount of OvertimePay in the dataset ?
'''

sal['OvertimePay'].max()

'''
Task7:
What is the job title of JOSEPH DRISCOLL ? Note: Use all caps, otherwise you may get an answer that doesn't match up (there is also a lowercase Joseph Driscoll).
'''
sal[sal['EmployeeName']=='JOSEPH DRISCOLL']['JobTitle']

'''
Task8:
How much does JOSEPH DRISCOLL make (including benefits)?
'''
sal[sal['EmployeeName']=='JOSEPH DRISCOLL']['TotalPayBenefits']

'''
Task9:
What is the name of highest paid person (including benefits)?
'''
sal[sal['TotalPayBenefits']== sal['TotalPayBenefits'].max()] #['EmployeeName']
# or
# sal.loc[sal['TotalPayBenefits'].idxmax()]

'''
Task10:
What is the name of lowest paid person (including benefits)? Do you notice something strange about how much he or she is paid?
'''
sal[sal['TotalPayBenefits']== sal['TotalPayBenefits'].min()] #['EmployeeName']
# or
# sal.loc[sal['TotalPayBenefits'].idxmax()]['EmployeeName']

## ITS NEGATIVE!! VERY STRANGE

'''
Task11:
What was the average (mean) BasePay of all employees per year? (2011-2014) ?
'''
sal.groupby('Year').mean()['BasePay']

'''
Task12:
How many unique job titles are there?
'''
sal['JobTitle'].nunique()

'''
Task13:
What are the top 5 most common jobs?
'''
sal['JobTitle'].value_counts().head(5)

'''
Task14:
How many Job Titles were represented by only one person in 2013? (e.g. Job Titles with only one occurence in 2013?)
'''
sum(sal[sal['Year']==2013]['JobTitle'].value_counts() == 1)

'''
Task15:
How many people have the word Chief in their job title? (This is pretty tricky)
'''
def chief_string(title):
    if 'chief' in title.lower():
        return True
    else:
        return False

sum(sal['JobTitle'].apply(lambda x: chief_string(x)))    

'''
Task16:
Is there a correlation between length of the Job Title string and Salary?

It should give something like this:
			title_len	TotalPayBenefits
title_len		1.000000	-0.036878
TotalPayBenefits	-0.036878	1.000000
'''

sal['title_len'] = sal['JobTitle'].apply(len)
sal[['title_len','TotalPayBenefits']].corr()    # No correlation.
