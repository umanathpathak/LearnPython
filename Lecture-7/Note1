#create a file C:\Users\ankit\Desktop\mymodule.py, having a simple function myfunc
def myfunc():
    print("I am in myfunc module")
    
    
    
#Create another .py file C:\Users\ankit\Desktop\mycallingmodule.py
import mymodule         #import the above created module, mymodule2
mymodule.myfunc()       #calling method myfunc in mymodule.


#On CMD, set your working directory as C:\Users\ankit\Desktop\.
#Now run the mycallingmodule.py file using below command:
#python mycallingmodule2.py


#you will motice that a __pycache__ folder is created in C:\Users\ankit\Desktop\ folder.
#and within this folder mymodule.cpython-36.pyc file is created. 
#If you open this file, you will see some junk characters and some code of your mymodule.py file.


#Now lets do the same exercise on spyder.
#First you have to set the working directory.

#Go to Tools->Preferences->Current working directory-> the following directory
#and set C:\Users\ankit\Desktop\ as your working directory.

#Now it wont be effective unitl you restart your kernal.

#After restarting kernal, run the mycallingmodule2.py file from spyder. You will notice that it will still work.

#Now checking whether this module is called directly or imported from other module.
#Lets change the content of mymodule.py as below:
def myfunc2():
    print("I am in myfin2 module")
 
def myprint():
	if __name__ == "__main__":
		print("I am called directly")
	else:
		print("I am imported")

myprint() 




#Now if we run this file directly, it will print, "I am called directly". 
#When the module is called directly, it's variable __name__ is set a value to '__main__'.

#Otherwise, its value is set to the module name. So if this module is called from other module then 'I am imported' will be printed.




#Now Lets add few variables in mymodule.py file.

x = 737
y = 30
z = 'USB'
ff = 'safsdf'

def myfunc():
    print("I am in myfin2 module")

def myprint():
	if __name__ == "__main__":
		print("I am called directly")
	else:
		print("I am imported")

myprint() 




#Now lets add some varibales in mycallingmodule.py file.
x = 10
y = 4
z = 'desktop'

import mymodule
mymodule.myfunc()

print(x)                    #output: 10
print(mymodule.x)           #output: 737

#import statement will create separate namespace for the imported module.
#to actually change the values of variables, lets use from import statement.

x = 10
y = 4
z = 'desktop'

from mymodule import *
mymodule.myfunc()

print(x)                    #output: 737


#To check all the variables and functions inside a module,  you can use below command:
import mymodule2
dir(mymodule2)






#Now lets explore packages.
#to make a folder into a package, it should have __init__.py file.
#this file can be empty. But generally it has the general information about the package in doc string.

#package is collection of modules. 
#a package can have multiple .py files. package can have sub package.
#to call a sub package, we can use . operator. A.B.mymodule means 
#A is parent package and B is sub package and from sub package B, we are calling mymodule file.

#to install external packages, use 'pip install pckgname' in anaconda prompt. 

    
    
