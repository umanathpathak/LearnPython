i=int(input("Enter any number between 1 to 9")) # take number from user and convert it to string

#if expression:
#   ....
#elif expression:
#   ....
#else:
#   ....

if i<5:
    print("i is less than 5", i)
else:
    print("i is greater than 5")


#Empty object(string, list, tuple, dictionary, sets), numeric 0, float 0.0 and Boolean False = False
#Anything else = True
if 0.0:
    print("True")
else:
    print("False")
    
    
# 'is' operator evaluates whether two objects are identical
a = 'nilesh'
b = 'nilesh'
if a is b:    
    print("True")
else:
    print("False")


#while loop example
i=1    
while i<5:
    print(i)
    i += 1
    
#make sure that you have proper control of the while loop.
#must specify a termination condition, otherwise it will end up in an infinite loop.
    
while 2>1:
    i=input("Enter any alphabet \n")
    if i=='c':
        continue    #skips the next statements and return to the top of the loop
    if i=='q':
        break       #breaks the loop and returns to the next statement outside of the loop
    print("You have typed", i)
    
    
# while-else loop, if your loop ends without executing break statement, then it will execute the else block.
while 2>1:
    i=input("Enter any alphabet \n")
    if i=='c':
        continue
    if i=='q':
        break
    print("You have typed", i)
else:
    print("While loop end without break")
    
    
#range function is to return a series of numbers
#format - range(start_pos, end_pos, step_size)
print(list(range(5)))           #just 1 argument means it is end_pos, by default start_pos is 0
print(list(range(100,200)))     #returns a series from 100 to 199
print(list(range(100,200,10)))  #step_size skips numbers in between
print(list(range(-10,-2)))      #negative numbers are also allowed in range
print(list(range(-1,-20,-1)))   #negative step_size, does the reverse tranversal


#For loop, mostly used when you know the number of iterations
for k in range(5):
    print(k)
    
for h in range(10):
    if h==3:
        continue        #skips the next statements and shifts pointer to the top of the loop
    print(h,h**2)
    if h==7:
        break           #break the loop abruptly and changes the pointer to the end of the loop
else:
    print("I am out of for loop")   #executes when for loop has ended without executing break


#zip function creates tuples from the inputs
a = [1,2,3]
b = [4,5,6]
for (a,b) in zip(a,b):
    print("a * b = ", a * b)
    

    
    
#without list comprehension 
l = []
for i in range(0,100):
    l.append(i*2+1)  #creates a list with formula(i*2+1) for each member in the range 0-99
    
l1 = [ i*2+1 for i in range(0,100)]     # Creating list with comprehension
print(l1)

d1 = { d:d*2+1 for d in range(0,100)} #Creating dictionary with comprehension
print(d1)


t1 = ( t*2+1 for t in range(0,100)) # Creating generator with comprehension
print(t1)       #generators can not be directly printed
for tt in t1:
    print(tt)


#creating a list with complex logic
l = []
for i in range(0,100):
    if i%5 == 0:
        l.append(i)
    else:
        l.append(i*2+1)

l1 = [i if i%5==0 else i*2+1 for i in range(0,100)]  # List comprehension with if else
print(l1)


#creating a list with filter
l = []
for i in range(0,100):
    if i%5 ==0 :        #create a list with only number divisble by 5
        l.append(i)
        
l = [i for i in range(0,100) if i%5 == 0]  #list comprehension with filter
print(l)

# NOTE
# While using comprehension, if you have only "if" statement then it need to mention at the end
#and if you have "if else" then need to mention at the start of the statement


#multiple for loops in dictionary comprehension is allowed
dd1 = { str(a*100)+str(b):a+b for a in range(0,100) for b in range(0,70) }
print(dd1)
print(len(dd1))
