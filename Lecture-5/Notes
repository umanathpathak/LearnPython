#Function - start by "def" followed by function name and then followed by ()
#function is object in python, function name is refeence to the actual function.
#You can pass the reference to some other variable and it will work like actual function.

echo = print
echo("nilesh")  #does same as print function

#creating own function add2
def add2(num1,num2):
    return num1+num2

a1=float(input("Enter first number : "))
a2=float(input("Enter second number : "))
add2(a1,a2)
add2('a1','a2')     #this works on strings too, doing this we achieve polymorphism.
print(add2)


def mul(num1,num2):
    return num1*num2
m1=float(input("Enter first number : "))
m2=float(input("Enter second number : "))
mul(m1,m2)
mul('m1',3)      #repeats the string
print(mul)

#by changing the value in the function,doesn't change the value of the actual variable outside of the function.
def add2(num1,num2):
    num1 = 80
    return num1+num2

#but that is not true for lists. Because lists are mutable onjects, 
#they are passed by reference and int are immutables so they are passed by value
l1 = [1,2,3]
def add2(num1,num2,l1):
    num1=70
    l1[0] = 50
    return num1+num2
    
num1=5      
num2=7
l1 = [1,2]
add2(num1,num2,l1)



'''
Note = value of num1 is not changing in variable explorer but value of l1[0] get changed
because list is mutable.
'''
def add2(num1,num2,l1):
    num1=70
    l1[0] = 50
    return num1+num2

n1=5    
n2=7
t1=(1,2)
add2(n1,n2,t1)  # will get error as tuple is immutable object









#Learning variable scope
n1=4
n2=5
l1 = [1,2]
def add2(num1,num2,l1):  
    global n1     #Now this value is referring to the n1 outside the function
    n1=70           #this will chagne the global n1
    print(n2)
    l1[0] = 50
    return num1+num2

add2(n1,n2,l1)
print(n1)           #Now you can not get n1=4 value as its memory ref number changed due to global n1 defined in function  



#LEGB = Local, Enclosing, Gloabl, Build-in
n1=4
n2=5
l1 = [1,2]
def maths():
    global n2
    n2=10
    def add2(num1,num2,l1):  
        global n1     #Now this value is accessible outside the function
        n1=70
        print(n2)
        l1[0] = 50
        print( num1+num2 )
    add2(n1,n2,l1)
maths()
print(n2) 






n1=4
n2=5
l1 = [1,2]
def maths():
    n2=10
    def add2(num1,num2,l1):  
        nonlocal n2         #To access enclouser value, not local and not global
        n2=30
        n1=70
        print("withing add2 function ", str(n2))
        l1[0] = 50
        print( "ans is : ", str(num1+num2) )
    add2(n1,n2,l1)
    print("Within maths func " + str(n2))
maths()
print("Outside all " + str(n2))        




#generator and yield

def gen():
    for i in range(10):
        yield i*3
g = gen()
next(g)
next(g)
next(g)

def gen1():
    for i in range(10):
        return ' '.join([str(i*2) for i in range(10)])
gen1()

'''
Note - gen1 acquiring memory space immediately when it defined, but yield only
acquire space when variable value required also it acquire space only for one at a time.
